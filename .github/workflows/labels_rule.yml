name: Manage Branch on Label Change
on:
  issues:
    types: [labeled, unlabeled]

jobs:
  create-or-delete-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch all remote branches
        run: |
          git fetch --all

      - name: Get Issue Details
        id: issue_details
        run: |
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "LABELG=${{ github.event.label.name }}" >> $GITHUB_ENV
          echo "ACTION=${{ github.event.action }}" >> $GITHUB_ENV

      - name: Format Branch Name
        id: format_branch
        run: |

          # Sanitizar el tÃ­tulo: eliminar caracteres no alfanumÃ©ricos y reemplazar los espacios con guiones
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 ]//g' | sed 's/ /-/g')

          # Asegurarse de que el nÃºmero de la issue no se repita en el tÃ­tulo
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed "s/^${ISSUE_NUMBER}-//")

          # Reemplazar mÃºltiples guiones consecutivos por uno solo
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed 's/-\+/-/g')

          # Quitar guiones al principio o al final
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed 's/^-//' | sed 's/-$//')
          
          echo "branch title $SANITIZED_TITLE"
          echo "label $LABELG"
          
          echo "SANITIZED_TITLE=$SANITIZED_TITLE" >> $GITHUB_ENV

      - name: Get Labels and Determine Branch Type
        id: determine_branch_type
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Fetch the labels for the issue
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$ISSUE_NUMBER/labels")
          
          # Extract label names and store them in an array
          LABELS=($(echo "$RESPONSE" | jq -r '.[].name'))
          
          # Display the labels
          echo "Labels: ${LABELS[@]}"
          
          # Store labels as an environment variable for use in later steps
          echo "labels=${LABELS[@]}" >> $GITHUB_ENV
          
          # Determinar el tipo de rama segÃºn las etiquetas
          BRANCH_TYPE="feature"  # Por defecto, tipo de rama "feature"
          for LABEL in "${LABELS[@]}"; do
            if [[ "$LABEL" == "bug" ]]; then
              BRANCH_TYPE="bugfix"
              break
            elif [[ "$LABEL" == "hotfix" ]]; then
              BRANCH_TYPE="hotfix"
              break
            fi
          done

          echo "BRANCH_TYPE=$BRANCH_TYPE" >> $GITHUB_ENV

      - name: Create and Push New Branch
        if: ${{ env.labels && contains(env.labels, 'in progress') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';
            const issueNumber = '${{ env.ISSUE_NUMBER }}';

            // Construir el nombre de la nueva rama
            const newBranchName = `${branchType}/${issueNumber}-${sanitizedTitle}`;
            console.log(`Creating branch: ${newBranchName}`);

            try {
              // Obtener la lista de ramas del repositorio
              const { data: branches } = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              // Comprobar si la rama ya existe
              const branchExists = branches.some(branch => branch.name === newBranchName);

              if (!branchExists) {
                console.log(`Branch does not exist, creating: ${newBranchName}`);

                // Crear la rama utilizando la sha del commit actual
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${newBranchName}`,
                  sha: context.sha, // Usar la sha del commit actual
                });

                console.log(`Branch created successfully: ${newBranchName}`);
              } else {
                console.log(`Branch already exists: ${newBranchName}`);
              }
            } catch (error) {
              console.error(`Error creating branch: ${error.message}`);
              throw error;
            }
            
      - name: Link Branch to Issue in Development Section
        if: ${{ env.labels && contains(env.labels, 'in progress') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';
            const newBranchName = `${branchType}/${issueNumber}-${sanitizedTitle}`;

            // Query para obtener los IDs necesarios
            const { repository } = await github.graphql('
              query($repo: String!, $owner: String!, $issueNumber: Int!) {
                repository(name: $repo, owner: $owner) {
                  id
                  issue(number: $issueNumber) {
                    id
                  }
                }
              }', {
              repo: context.repo.repo,
              owner: context.repo.owner,
              issueNumber: parseInt(issueNumber, 10),
            });

            const repositoryId = repository.id;
            const issueId = repository.issue.id;

            console.log(`Linking branch "${newBranchName}" to issue #${issueNumber}`);

            // Ejecutar la mutaciÃ³n para vincular la rama
            const result = await github.graphql(`
              mutation($issueId: ID!, $name: String!, $repositoryId: ID!) {
                createLinkedBranch(input: {
                  issueId: $issueId,
                  name: $name,
                  repositoryId: $repositoryId
                }) {
                  linkedBranch {
                    id
                    ref {
                      name
                    }
                  }
                }
              }
            `, {
              issueId: issueId,
              name: newBranchName,
              repositoryId: repositoryId,
            });

            console.log(`Branch successfully linked to issue: ${result.createLinkedBranch.linkedBranch.ref.name}`);

      - name: Comment on Issue with Branch Link
        if: ${{ env.labels && contains(env.labels, 'in progress') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const branchType = '${{ env.BRANCH_TYPE }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const newBranchName = `${branchType}/${issueNumber}-${sanitizedTitle}`;
            const repoUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${newBranchName}`;

            // Crear un comentario en la incidencia con un enlace a la nueva rama
            const commentBody = `ðŸš€ A new branch has been created for this issue: [${newBranchName}](${repoUrl}).`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentBody,
            });

            console.log(`Commented on issue #${issueNumber} with branch link: ${repoUrl}`);

      - name: Delete Unnecessary Branches (if exists)
        if: ${{ env.labels && contains(env.labels, 'in progress') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';

            // Definir todas las posibilidades de ramas
            const branchTypes = ["feature", "bugfix", "hotfix"];

            // Recorrer las posibles ramas
            for (const type of branchTypes) {
              const branchName = `${type}/${issueNumber}-${sanitizedTitle}`;

              // Si la rama no es del tipo actual, no eliminamos la rama
              if (type !== branchType) {
                const ref = `heads/${branchName}`;

                console.log(`Checking branch: ${branchName}`);
                try {
                  // Verificar si la referencia existe
                  const { data } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref,
                  });
  
                  console.log(`Branch found: ${data.ref}`);
  
                  // Eliminar la rama si existe
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref,
                  });
  
                  console.log(`Successfully deleted branch: ${branchName}`);
                } catch (error) {
                  if (error.status === 404) {
                    console.log(`Branch does not exist: ${branchName}`);
                  } else {
                    console.error(`Error processing branch ${branchName}: ${error.message}`);
                    throw error;
                  }
                }
              }
            }

      - name: Delete All Branches (if exists)
        if: ${{ !env.labels || (!contains(env.labels, 'in progress')) }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';

            // Definir todas las posibilidades de ramas
            const branchTypes = ["feature", "bugfix", "hotfix"];

            // Recorrer las posibles ramas
            for (const type of branchTypes) {
              const branchName = `${type}/${issueNumber}-${sanitizedTitle}`;

              const ref = `heads/${branchName}`;

              console.log(`Checking branch: ${branchName}`);
              try {
                // Verificar si la referencia existe
                const { data } = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref,
                });
          
                console.log(`Branch found: ${data.ref}`);
          
                // Eliminar la rama si existe
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref,
                });
          
                console.log(`Successfully deleted branch: ${branchName}`);
              } catch (error) {
                if (error.status === 404) {
                  console.log(`Branch does not exist: ${branchName}`);
                } else {
                  console.error(`Error processing branch ${branchName}: ${error.message}`);
                  throw error;
                }
              }
            }
