name: Manage Branch on Label Change
on:
  issues:
    types: [labeled, unlabeled]

jobs:
  create-or-delete-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch all remote branches
        run: |
          git fetch --all

      - name: Get Issue Details
        id: issue_details
        run: |
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "LABELG=${{ github.event.label.name }}" >> $GITHUB_ENV
          echo "ACTION=${{ github.event.action }}" >> $GITHUB_ENV

      - name: Format Branch Name
        id: format_branch
        run: |

          # Sanitizar el título: eliminar caracteres no alfanuméricos y reemplazar los espacios con guiones
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 ]//g' | sed 's/ /-/g')

          # Asegurarse de que el número de la issue no se repita en el título
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed "s/^${ISSUE_NUMBER}-//")

          # Reemplazar múltiples guiones consecutivos por uno solo
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed 's/-\+/-/g')

          # Quitar guiones al principio o al final
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed 's/^-//' | sed 's/-$//')
          
          echo "branch title $SANITIZED_TITLE"
          echo "label $LABELG"
          
          echo "SANITIZED_TITLE=$SANITIZED_TITLE" >> $GITHUB_ENV

      - name: Get Labels and Determine Branch Type
        id: determine_branch_type
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Fetch the labels for the issue
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$ISSUE_NUMBER/labels")
          
          # Extract label names and store them in an array
          LABELS=($(echo "$RESPONSE" | jq -r '.[].name'))
          
          # Display the labels
          echo "Labels: ${LABELS[@]}"
          
          # Store labels as an environment variable for use in later steps
          echo "labels=${LABELS[@]}" >> $GITHUB_ENV
          
          # Determinar el tipo de rama según las etiquetas
          BRANCH_TYPE="feature"  # Por defecto, tipo de rama "feature"
          for LABEL in "${LABELS[@]}"; do
            if [[ "$LABEL" == "bug" ]]; then
              BRANCH_TYPE="bugfix"
              break
            elif [[ "$LABEL" == "hotfix" ]]; then
              BRANCH_TYPE="hotfix"
              break
            fi
          done

          echo "BRANCH_TYPE=$BRANCH_TYPE" >> $GITHUB_ENV

      - name: Create and Push New Branch
        if: ${{ env.labels && contains(env.labels, 'in progress') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';
            const issueNumber = '${{ env.ISSUE_NUMBER }}';

            // Construir el nombre de la nueva rama
            const newBranchName = `${branchType}/${issueNumber}-${sanitizedTitle}`;
            console.log(`Creating branch: ${newBranchName}`);

            try {
              // Obtener la lista de ramas del repositorio
              const { data: branches } = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              // Comprobar si la rama ya existe
              const branchExists = branches.some(branch => branch.name === newBranchName);

              if (!branchExists) {
                console.log(`Branch does not exist, creating: ${newBranchName}`);

                // Crear la rama utilizando la sha del commit actual
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${newBranchName}`,
                  sha: context.sha, // Usar la sha del commit actual
                });

                console.log(`Branch created successfully: ${newBranchName}`);
              } else {
                console.log(`Branch already exists: ${newBranchName}`);
              }
            } catch (error) {
              console.error(`Error creating branch: ${error.message}`);
              throw error;
            }

      - name: Delete Unnecessary Branches (if exists)
        if: ${{ env.labels && contains(env.labels, 'in progress') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';

            // Definir todas las posibilidades de ramas
            const branchTypes = ["feature", "bugfix", "hotfix"];

            // Recorrer las posibles ramas
            for (const type of branchTypes) {
              const branchName = `${type}/${issueNumber}-${sanitizedTitle}`;

              // Si la rama no es del tipo actual, no eliminamos la rama
              if (type !== branchType) {
                try {
                  // Obtener la lista de ramas del repositorio
                  const { data: branches } = await github.rest.repos.listBranches({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                  });

                  // Comprobar si la rama existe en la lista de ramas
                  const branchExists = branches.some(branch => branch.name === branchName);

                  if (branchExists) {
                    // Si la rama existe, eliminarla
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `refs/heads/${branchName}`,
                    });
                    console.log(`Deleting unnecessary branch: ${branchName}`);
                  } else {
                    console.log(`No branch found to delete: ${branchName}`);
                  }
                } catch (error) {
                  console.error(`Error processing branch ${branchName}: ${error.message}`);
                  throw error;
                }
              }
            }

      - name: Delete All Branches (if exists)
        if: ${{ env.labels && !contains(env.labels, 'in progress') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';

            // Definir todas las posibilidades de ramas
            const branchTypes = ["feature", "bugfix", "hotfix"];

            // Recorrer las posibles ramas
            for (const type of branchTypes) {
              const branchName = `${type}/${issueNumber}-${sanitizedTitle}`;

              try {
                // Obtener la lista de ramas del repositorio
                const { data: branches } = await github.rest.repos.listBranches({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                });

                // Comprobar si la rama existe
                const branchExists = branches.some(branch => branch.name === branchName);

                if (branchExists) {
                  // Si la rama existe, eliminarla
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `refs/heads/${branchName}`,
                  });
                  console.log(`Deleting unnecessary branch: ${branchName}`);
                } else {
                  console.log(`No branch found to delete: ${branchName}`);
                }
              } catch (error) {
                // Manejo de errores
                console.error(`Error processing branch ${branchName}: ${error.message}`);
                throw error;
              }
            }
