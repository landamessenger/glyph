name: Manage Branch on Label Change
on:
  issues:
    types: [opened, edited, labeled, unlabeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  create-or-delete-branch:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set development branch
        run: |
          echo "BRANCH_MANAGEMENT_LABEL='branching'" >> $GITHUB_ENV
          echo "DEVELOPMENT_BRANCH=master" >> $GITHUB_ENV

      - name: Link Issue to Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.payload.issue.number;

            const issueQuery = `
              query($repo: String!, $owner: String!, $issueNumber: Int!) {
                repository(name: $repo, owner: $owner) {
                  issue(number: $issueNumber) {
                    id
                  }
                }
              }
            `;
            const issueResult = await github.graphql(issueQuery, {
              repo: context.repo.repo,
              owner: context.repo.owner,
              issueNumber: issueNumber,
            });
            const issueId = issueResult.repository.issue.id;

            const projectQuery = `
              query($repo: String!, $owner: String!, $projectNumber: Int!) {
                repository(name: $repo, owner: $owner) {
                  projectV2(number: $projectNumber) {
                    id
                  }
                }
              }
            `;
            const projectResult = await github.graphql(projectQuery, {
              repo: context.repo.repo,
              owner: context.repo.owner,
              projectNumber: 2,
            });
            const projectId = projectResult.repository.projectV2.id;

            const linkMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;
            const linkResult = await github.graphql(linkMutation, {
              projectId: projectId,
              contentId: issueId,
            });

            console.log(`Issue linked to project: ${linkResult.addProjectV2ItemById.item.id}`);

      - name: Fetch all remote branches
        run: |
          git fetch --tags --force
          git fetch --all -v

      - name: Get Latest Tag
        id: get_latest_tag
        run: |          
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Get Tag Type
        id: get_tag_type
        run: |          
          TAG_TYPE=$(git cat-file -t ${{ env.LATEST_TAG }})
          echo "Tag type: $TAG_TYPE"
          echo "TAG_TYPE=$TAG_TYPE" >> $GITHUB_ENV

      - name: Get Latest SHA1 commit Tag
        if: ${{ env.LATEST_TAG != '' }}
        id: get_latest_commit_tag
        run: |          
          TAG_OID=$(git rev-list -n 1 ${{ env.LATEST_TAG }})
          echo "Commit tag: $TAG_OID"
          echo "TAG_OID=$TAG_OID" >> $GITHUB_ENV

      - name: Check Issue Title Format
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const issueTitle = context.payload.issue.title;

            const titlePattern = new RegExp(`^\\d+\\s*-\\s*`);
            if (!titlePattern.test(issueTitle)) {
              const formattedTitle = `${issueNumber} - ${issueTitle}`;
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                title: formattedTitle
              });
            }

      - name: Get Issue Details
        id: issue_details
        run: |
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "LABELG=${{ github.event.label.name }}" >> $GITHUB_ENV
          echo "ACTION=${{ github.event.action }}" >> $GITHUB_ENV

      - name: Format Branch Name
        id: format_branch
        run: |

          # Sanitizar el título: eliminar caracteres no alfanuméricos y reemplazar los espacios con guiones
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 ]//g' | sed 's/ /-/g')

          # Asegurarse de que el número de la issue no se repita en el título
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed "s/^${ISSUE_NUMBER}-//")

          # Reemplazar múltiples guiones consecutivos por uno solo
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed 's/-\+/-/g')

          # Quitar guiones al principio o al final
          SANITIZED_TITLE=$(echo "$SANITIZED_TITLE" | sed 's/^-//' | sed 's/-$//')
          
          echo "branch title $SANITIZED_TITLE"
          echo "label $LABELG"
          
          echo "SANITIZED_TITLE=$SANITIZED_TITLE" >> $GITHUB_ENV

      - name: Get Labels and Determine Branch Type
        id: determine_branch_type
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$ISSUE_NUMBER/labels")
          
          LABELS=($(echo "$RESPONSE" | jq -r '.[].name'))
          
          echo "Labels: ${LABELS[@]}"
          
          echo "labels=${LABELS[@]}" >> $GITHUB_ENV
          
          HOTFIX_TYPE="0"
          BRANCH_TYPE="feature"
          for LABEL in "${LABELS[@]}"; do
            if [[ "$LABEL" == "bug" ]]; then
              BRANCH_TYPE="bugfix"
            elif [[ "$LABEL" == "hotfix" ]]; then
              BRANCH_TYPE="bugfix"
              HOTFIX_TYPE="1"
            fi
          done

          echo "HOTFIX_TYPE=$HOTFIX_TYPE" >> $GITHUB_ENV
          echo "BRANCH_TYPE=$BRANCH_TYPE" >> $GITHUB_ENV

      - name: Link Hotfix Branch to Issue in Development Section
        if: ${{ env.labels && contains(env.labels, env.BRANCH_MANAGEMENT_LABEL) && env.TAG_OID != '' && env.LATEST_TAG != '' && env.HOTFIX_TYPE == '1' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            const developmentBranch = '${{ env.DEVELOPMENT_BRANCH }}';
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const tag = '${{ env.LATEST_TAG }}';
            console.log(`Tag: ${tag}`);

            const incrementHotfixVersion = (version) => {
              const parts = version.split('.').map(Number);
              parts[parts.length - 1] += 1;
              return parts.join('.');
            };

            const newVersion = incrementHotfixVersion(tag);
            
            const baseBranchName = `tags/${tag}`;
            const newBranchName = `hotfix/${newVersion}`;

            console.log(`Tag branch: ${baseBranchName}`);
            console.log(`Hotfix branch: ${newBranchName}`);

            const { repository } = await github.graphql(`
              query($repo: String!, $owner: String!, $issueNumber: Int!) {
                repository(name: $repo, owner: $owner) {
                  id
                  issue(number: $issueNumber) {
                    id
                  }
                  ref(qualifiedName: "refs/heads/${developmentBranch}") {
                    target {
                      ... on Commit {
                        oid
                      }
                    }
                  }
                }
              }
            `, {
              repo: context.repo.repo,
              owner: context.repo.owner,
              issueNumber: parseInt(issueNumber, 10)
            });

            console.log(`Repository information retrieved: ${JSON.stringify(repository.ref)}`)
            
            const repositoryId = repository.id;
            const issueId = repository.issue.id;
            const branchOid = '${{ env.TAG_OID }}';
            // const branchOid = repository.ref.target.oid;

            console.log(`Linking branch "${newBranchName}" (oid: ${branchOid}) to issue #${issueNumber}`);

            try {
              const result = await github.graphql(`
                mutation($issueId: ID!, $name: String!, $repositoryId: ID!, $oid: GitObjectID!) {
                  createLinkedBranch(input: {
                    issueId: $issueId,
                    name: $name,
                    repositoryId: $repositoryId,
                    oid: $oid,
                  }) {
                    linkedBranch {
                      id
                      ref {
                        name
                      }
                    }
                  }
                }
              `, {
                issueId: issueId,
                name: `/${newBranchName}`,
                repositoryId: repositoryId,
                oid: branchOid,
              });

              console.log(`Hotfix branch successfully linked to issue: ${JSON.stringify(result)}`);    
            } catch (error) {
              console.error(error);
            }
            core.exportVariable('HOTFIX_VERSION', newVersion);
            core.exportVariable('HOTFIX_BRANCH', newBranchName);

      - name: Link Branch to Issue in Development Section
        if: ${{ env.labels && contains(env.labels, env.BRANCH_MANAGEMENT_LABEL) }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const developmentBranch = '${{ env.DEVELOPMENT_BRANCH }}';
            const isHotfix = '${{ env.HOTFIX_TYPE }}' === '1';
            const hotfixBranch = '${{ env.HOTFIX_BRANCH }}';
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';
            const newBranchName = `${branchType}/${issueNumber}-${sanitizedTitle}`;
            
            const branchTypes = ["feature", "bugfix"];

            let baseBranchName = developmentBranch;
  
            if (!isHotfix) {
              console.log(`Searching for branches related to issue #${issueNumber}...`);
              
              const { data } = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              for (const type of branchTypes) {
                const prefix = `${type}/${issueNumber}-`;
              
                try {
                  const matchingBranch = data.find(branch => branch.name.indexOf(prefix) > -1);
                  
                  if (matchingBranch) {
                    baseBranchName = matchingBranch.name;
                    console.log(`Found branch: ${baseBranchName}`);
                    core.exportVariable('FEATURE_ORIGIN', baseBranchName);
                    break;
                  }
                } catch (error) {
                  console.error(`Error while listing branches: ${error.message}`);
                  throw error;
                }
              }
            } else {
              baseBranchName = hotfixBranch;
            }
            
            console.log(`Base branch: ${baseBranchName}`);

            const { repository } = await github.graphql(`
              query($repo: String!, $owner: String!, $issueNumber: Int!) {
                repository(name: $repo, owner: $owner) {
                  id
                  issue(number: $issueNumber) {
                    id
                  }
                  ref(qualifiedName: "refs/heads/${baseBranchName}") {
                    target {
                      ... on Commit {
                        oid
                      }
                    }
                  }
                }
              }
            `, {
              repo: context.repo.repo,
              owner: context.repo.owner,
              issueNumber: parseInt(issueNumber, 10)
            });
            
            const repositoryId = repository.id;
            const issueId = repository.issue.id;
            const branchOid = repository.ref.target.oid;
            
            console.log(`Linking branch "${newBranchName}" (oid: ${branchOid}) to issue #${issueNumber}`);
             
            const result = await github.graphql(`
              mutation($issueId: ID!, $name: String!, $repositoryId: ID!, $oid: GitObjectID!) {
                createLinkedBranch(input: {
                  issueId: $issueId,
                  name: $name,
                  repositoryId: $repositoryId,
                  oid: $oid,
                }) {
                  linkedBranch {
                    id
                    ref {
                      name
                    }
                  }
                }
              }
            `, {
              issueId: issueId,
              name: `/${newBranchName}`,
              repositoryId: repositoryId,
              oid: branchOid,
            });
            
            console.log(`Branch successfully linked to issue: ${JSON.stringify(result)}`);    

      - name: Delete Unnecessary Branches (if exists)
        if: ${{ env.labels && contains(env.labels, env.BRANCH_MANAGEMENT_LABEL) }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';

            const branchTypes = ["feature", "bugfix"];

            const { data } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const deletedBranches = []

            for (const type of branchTypes) {
              let branchName = `${type}/${issueNumber}-${sanitizedTitle}`;
              const prefix = `${type}/${issueNumber}-`;

              if (type !== branchType) {
            
                const matchingBranch = data.find(branch => branch.name.indexOf(prefix) > -1);
            
                if (!matchingBranch) {
                  continue;
                }
            
                branchName = matchingBranch.name;
                console.log(`Found branch: ${branchName}`);
            
                const ref = `heads/${branchName}`;

                console.log(`Checking branch reference: ${branchName}`);
                try {
                  const { data } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref,
                  });
  
                  console.log(`Branch found: ${data.ref}`);
  
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref,
                  });

                  deletedBranches.push(branchName)
                  console.log(`Successfully deleted branch: ${branchName}`);
                } catch (error) {
                  if (error.status === 404) {
                    console.log(`Branch does not exist: ${branchName}`);
                  } else {
                    console.error(`Error processing branch ${branchName}: ${error.message}`);
                    throw error;
                  }
                }
              }
            }
            
            core.exportVariable('DELETED_BRANCHES', JSON.stringify(deletedBranches));

      - name: Delete All Branches (if exists)
        if: ${{ !env.labels || (!contains(env.labels, env.BRANCH_MANAGEMENT_LABEL)) }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            const branchType = '${{ env.BRANCH_TYPE }}';

            const branchTypes = ["feature", "bugfix"];

            const { data } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const deletedBranches = []
            
            for (const type of branchTypes) {
              let branchName = `${type}/${issueNumber}-${sanitizedTitle}`;
              const prefix = `${type}/${issueNumber}-`;
            
              const matchingBranch = data.find(branch => branch.name.indexOf(prefix) > -1);
          
              if (!matchingBranch) {
                continue;
              }
          
              branchName = matchingBranch.name;
              console.log(`Found branch: ${branchName}`);
          
              const ref = `heads/${branchName}`;

              console.log(`Checking branch reference: ${branchName}`);

              console.log(`Checking branch: ${branchName}`);
              try {
                const { data } = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref,
                });
          
                console.log(`Branch found: ${data.ref}`);
          
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref,
                });
          
                deletedBranches.push(branchName)
                console.log(`Successfully deleted branch: ${branchName}`);
              } catch (error) {
                if (error.status === 404) {
                  console.log(`Branch does not exist: ${branchName}`);
                } else {
                  console.error(`Error processing branch ${branchName}: ${error.message}`);
                  throw error;
                }
              }
            }
            
            let deletedBranchesMessage = ''
            for (let i = 0; i < deletedBranches.length; i++) {
              const branch = deletedBranches[i];
              console.log(`Processing branch: ${branch}`);
              deletedBranchesMessage+=`\n${i + 1}. The branch \`${branch}\` was removed.`
            }
            
            const commentBody = `## 🗑️ Cleanup Actions:
            ${deletedBranchesMessage}
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentBody,
            });

            console.log(`Commented on issue #${issueNumber}`);

      - name: Comment on Issue resume of hotfix actions
        if: ${{ env.labels && contains(env.labels, env.BRANCH_MANAGEMENT_LABEL) && env.TAG_OID != '' && env.LATEST_TAG != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deletedBranches = JSON.parse(`${{ env.DELETED_BRANCHES }}` || '[]');
            const issueNumber = '${{ env.ISSUE_NUMBER }}';
            const hotfixVersion = '${{ env.HOTFIX_VERSION }}';
            const isHotfix = '${{ env.HOTFIX_TYPE }}' === '1';
            const isBugfix = '${{ env.BRANCH_TYPE }}' === 'bugfix';
            const isFeature = '${{ env.BRANCH_TYPE }}' === 'feature';
            const tag = '${{ env.LATEST_TAG }}';
            const tagBranch = `tags/${tag}`;
            const tagUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${tagBranch}`;

            const featureOriginBranch = '${{ env.FEATURE_ORIGIN }}';
            const featureOriginUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${featureOriginBranch}`;
            
            const defaultBranch = '${{ env.DEVELOPMENT_BRANCH }}';
            const defaultUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${defaultBranch}`;
            
            let developmentBranch = '${{ env.DEVELOPMENT_BRANCH }}';
            let developmentUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${developmentBranch}`;
            
            const hotfixBranch = '${{ env.HOTFIX_BRANCH }}';
            const hotfixUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${hotfixBranch}`;
            
            const branchType = '${{ env.BRANCH_TYPE }}';
            const sanitizedTitle = '${{ env.SANITIZED_TITLE }}';
            
            const newBranchName = `${branchType}/${issueNumber}-${sanitizedTitle}`;
            const newRepoUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${newBranchName}`;

            let deletedBranchesMessage = ''
            if (!isHotfix) {
              for (let i = 0; i < deletedBranches.length; i++) {
                const branch = deletedBranches[i];
                if (branch.indexOf('feature/') > -1 || branch.indexOf('bugfix/') > -1) {
                  developmentBranch = branch;
                  developmentUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${developmentBranch}`;
                }
              }
            }
            
            let title = ''
            let content = ''
            let footer = ''
            let stepOn = 1
            
            if (isHotfix) {
              title = '🔥🐛 Hotfix Actions'
              content = `
              1. The tag [\`${tagBranch}\`](${tagUrl}) was used to create the branch [\`${hotfixBranch}\`](${hotfixUrl}).
              2. The branch [\`${hotfixBranch}\`](${hotfixUrl}) was used to create the branch [\`${newBranchName}\`](${newRepoUrl}).
              `
              footer = `
              ### Reminder
              1. Make yourself a coffee ☕.
              2. Commit the necessary changes to [\`${newBranchName}\`](${newRepoUrl}).
              3. Open a Pull Request from [\`${newBranchName}\`](${newRepoUrl}) to [\`${hotfixBranch}\`](${hotfixUrl}). [New PR](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${hotfixBranch}...${newBranchName}?expand=1)
              4. After merging into [\`${hotfixBranch}\`](${hotfixUrl}), create the tag \`tags/${hotfixVersion}\`.
              5. Open a Pull Request from [\`${hotfixBranch}\`](${hotfixUrl}) to [\`${defaultBranch}\`](${defaultUrl}). [New PR](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${defaultBranch}...${hotfixBranch}?expand=1)
              `
              stepOn = 2
            } else if (isBugfix) {
              title = '🐛 Bugfix Actions'
              content = `
              1. The branch [\`${featureOriginBranch}\`](${featureOriginUrl}) was used to create the branch [\`${newBranchName}\`](${newRepoUrl}).
              `
              footer = `
              ### Reminder
              1. Make yourself a coffee ☕.
              2. Commit the necessary changes to [\`${newBranchName}\`](${newRepoUrl}).
              3. Open a Pull Request from [\`${newBranchName}\`](${newRepoUrl}) to [\`${defaultBranch}\`](${defaultUrl}). [New PR](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${defaultBranch}...${newBranchName}?expand=1)
              `
            
            } else if (isFeature) {
              title = '🛠️ Feature Actions'
              content = `
              1. The branch [\`${featureOriginBranch}\`](${featureOriginUrl}) was used to create the branch [\`${newBranchName}\`](${newRepoUrl}).
              `
              footer = `
              ### Reminder
              1. Make yourself a coffee ☕.
              2. Commit the necessary changes to [\`${newBranchName}\`](${newRepoUrl}).
              3. Open a Pull Request from [\`${newBranchName}\`](${newRepoUrl}) to [\`${defaultBranch}\`](${defaultUrl}). [New PR](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${defaultBranch}...${newBranchName}?expand=1)
              `
            }
            
            for (let i = 0; i < deletedBranches.length; i++) {
              const branch = deletedBranches[i];
              console.log(`Processing branch: ${branch}`);
              deletedBranchesMessage+=`\n${stepOn + i + 1}. The branch \`${branch}\` was removed.`
            }
            
            const commentBody = `## ${title}:
            ${content}
            ${deletedBranchesMessage}
            ${footer}
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentBody,
            });

            console.log(`Commented on issue #${issueNumber}`);

